apiVersion: v1
data:
  globaliolimits.cfg: |
    # This is an example global IO limiting configuration file.
    # See globaliolimits.cfg(5) for more information.

    # subsystem blkio

    # limit unclassified 1234

    # limit /some_group               2345
    # limit /some_group/some_subgroup 3456
    # limit /another_group            4567
  mfsexports.cfg: |
    # mfsexports.cfg(5)
    # Allow everything but "meta".
    *                       /       rw,alldirs,maproot=0,ignoregid

    # Allow "meta".
    *                       .       rw

    # Line format:
    #  [ip range] [path] [options]
    # ip range:
    #  * = any ip (same as 0.0.0.0/0)
    #  A.B.C.D = given ip address
    #  A.B.C.D-E.F.G.H = range of ip addresses
    #  A.B.C.D/BITS = A.B.C.D network with BITS ones in netmask
    #  A.B.C.D/E.F.G.H = A.B.C.D network with E.F.G.H netmask
    # path:
    #  . = special 'path' that means 'meta'
    #  /... = path in mfs structure
    # options:
    #  ro/rw/readonly/readwrite = meaning is obvious
    #  alldirs = any subdirectored can be mounted as root
    #  dynamicip = ip is tested only during first authentication, then client can use the same session id from any ip
    #  ignoregid = group id (gid) is not tested - important when you want to use auxilinary groups
    #  allcanchangequota = non-root users are allowed to change quotas
    #  nomasterpermcheck = disable permission checks in master server
    #  maproot=UID[:GID] = treat all root (user with uid equal to zero) operations as operations done by user with uid equal to UID and gid equal to GID (or default gid of this user)
    #  mapall=UID[:GID} = like above but for all operations (for both options UID and/or GID can be specified as username or groupname existing on master machine)
    #  password=TEXT = force authentication using given password
    #  md5pass=MD5 = like above, but with password defined as it's MD5 hash (MD5 specified as 128-bit hexadecimal number)
    #  minversion=VERS = allow only clients with version number equal or greater than VERS (VERS can be specified as X or X.Y or X.Y.Z)
    #  mingoal=N = do not allow to set goal below N (N should be a number from '1' to '20')
    #  maxgoal=N = do not allow to set goal above N (N as above)
    #  mintrashtime=TIMEDURATION = do not allow to set trashtime below TIMEDURATION (TIMEDURATION can be specified as number of seconds or combination of elements #W,#D,#H,#M,#S with given order)
    #  maxtrashtime=TIMEDURATION = do not allow to set trashtime above TIMEDURATION (TIMEDURATION can be specified as above)
    #
    # Defaults:
    #  readonly,maproot=999:999,mingoal=1,maxgoal=20,mintrashtime=0,maxtrashtime=4294967295
    #
    # TIMEDURATION examples:
    #  2H = 2 hours
    #  4h30M = 4 hours and 30 minutes (time units are case insensitive)
    #  12w = 12 weeks
    #  86400 = 86400 seconds = 1 day
    #  11d13h46m40s = 1000000 seconds (defined in a little strage way as 11 days, 13 hours, 46 minutes and 40 seconds)
    #  48H = 48 hours = 2 days (it is allowed to use any positive number with any time unit as long as calculated number of seconds do not overrun 4294967295)
    #  30m12h = wrong definition (minutes before hours)
    #  30m12 = wrong definition (12 without unit definition - only one, alone number is allowed without unit definition)
    #  50000d = wrong definition (calculated number of seconds is 4320000000 which is greater than 4294967295)

    # Some examples:

    #  Users from any IP can mount root directory as a read-only file system. Local roots are mapped as users with uid:gid = 999:999.
    #*                      /       ro

    #  Users from IP 192.168.1.0-192.168.1.255 can mount root directory as a standard read/write file system. Local roots are mapped as users with uid:gid = 999:999.
    #192.168.1.0/24         /       rw

    #  Users from IP 192.168.1.0-192.168.1.255 when give password 'passcode' can mount any subdirectory as a standard read/write file system. Local roots are left unmapped.
    #192.168.1.0/24         /       rw,alldirs,maproot=0,password=passcode

    #  Users from IP 10.0.0.0-10.0.0.5 when give password 'test' can mount 'test' subdirectory as a standard read/write file system. Local roots are mapped as 'nobody' users (usually uid=65534).
    #10.0.0.0-10.0.0.5      /test   rw,maproot=nobody,password=test

    #  Users from IP 10.1.0.0-10.1.255.255 can mount 'public' subdirectory as a standard read/write file system. All users are mapped as users with uid:gid = 1000:1000.
    #10.1.0.0/255.255.0.0   /public rw,mapall=1000:1000

    #  Users from IP 10.2.0.0-10.2.255.255 can mount everything, but can't decrease trash time below 2 hours and 30 minutes and above 2 weeks
    #10.2.0.0/16            /       rw,alldirs,maproot=0,mintrashtime=2h30m,maxtrashtime=2w
  mfsgoals.cfg: |
    # mfsgoals.cfg(5)
    # An example of configuration of goals. It contains the default values.

    1 1 : _
    2 2 : _ _
    3 3 : _ _ _
    4 4 : _ _ _ _
    5 5 : _ _ _ _ _

    # (...)

    # 20 20 : _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    # Defaults (min(goal_id, 5) standard copies) are assumed for unspecified goals.
    # Custom goals can be defined with or without labels.
    #
    # EXAMPLES:
    #
    #  3 3 : _ _ _                                 # one of the default goals (three copies anywhere)
    #  8 not_important_file : _                    # only one copy
    # 11 important_file : _ _
    # 12 local_copy_on_mars : mars _               # at least one copy in the Martian datacenter
    # 13 cached_on_ssd : ssd _
    # 14 very_important_file : _ _ _ _
    # 15 default_xor3 : $xor3
    # 16 fast_read : $xor2 { ssd ssd hdd }
    # 17 xor5 : $xor5 { hdd }                      # at least one part on hdd
    # 14 min_two_locations: _ locationA locationB  # one copy in A, one in B, third anywhere
    # 15 fast_access      : ssd _ _                # one copy on ssd, two additional on any drives
    # 16 two_manufacturers: WD HT                  # one on WD disk, one on HT disk
    # 17 default_ec : $ec(5,2)                     # erasure code with 5 data parts and 2 parity parts
    # 18 wide_ec : $ec(17,9) { ssd ssd }           # erasure code 17+9 with at least two parts on ssd
  mfsmaster.cfg: |
    # mfsmaster.cfg(5)

    ## Personality of this instance of metadata server ('master' or 'shadow').
    ## 'master' means that this instance of metadata server acts as main
    ## metadata server govering all file system metadata modifications.
    ## 'shadow' means that this instance of metadata server acts as backup
    ## metadata server ready for immediate deployment as new 'master' in case
    ## of current 'master' failure.
    ## Only one metadata server in LizardFS shall have 'master' personality.
    # PERSONALITY = master

    ## Password for administrative connections and commands.
    # ADMIN_PASSWORD =

    ## User to run daemon as.
    # WORKING_USER = lizardfs

    ## Group to run daemon as (if empty then default user group will be used).
    # WORKING_GROUP = lizardfs

    ## Name of process to place in syslog messages.
    ## (Default: mfsmaster)
    SYSLOG_IDENT = lfs-master

    ## Whether to perform "mlockall()" to avoid swapping out mfsmaster process,
    ## boolean value (0 or 1).
    ## (Default: 0)
    # LOCK_MEMORY = 0

    ## Nice level to run daemon with, when possible to set.
    ## (Default: -19)
    # NICE_LEVEL = -19

    ## Path to mfsexports.cfg file
    ## (Default: /etc/lizardfs/mfsexports.cfg)
    # EXPORTS_FILENAME = /etc/lizardfs/mfsexports.cfg

    ## Path to mfstopology.cfg file
    ## (Default: /etc/lizardfs/mfstopology.cfg)
    # TOPOLOGY_FILENAME = /etc/lizardfs/mfstopology.cfg

    ## Path to mfsgoals.cfg file
    ## (Default: /etc/lizardfs/mfsgoals.cfg)
    # CUSTOM_GOALS_FILENAME = /etc/lizardfs/mfsgoals.cfg

    ## Location for metadata files.
    ## (Default: /var/lib/lizardfs)
    # DATA_PATH = /var/lib/lizardfs

    ## If set, servers with the same IP address will be treated
    ## as their topology distance is 0.
    ## (Default: 1)
    # PREFER_LOCAL_CHUNKSERVER = 1

    ## When this option is set (equals 1) master will try to recover metadata
    ## from changelog when it is being started after a crash; otherwise it will
    ## refuse to start and 'mfsmetarestore' should be used to recover the metadata.
    ## (Default: 0)
    # AUTO_RECOVERY = 0

    ## Number of metadata change log files.
    ## (Default: 50)
    # BACK_LOGS = 50

    ## Number of previous metadata files to be kept.
    ## (Default: 1)
    # BACK_META_KEEP_PREVIOUS = 1

    ## Initial delay in seconds before starting chunk operations.
    ## (Default: 300)
    # OPERATIONS_DELAY_INIT = 300

    ## Chunk operations delay in seconds after chunkserver disconnection.
    ## (Default: 3600)
    # OPERATIONS_DELAY_DISCONNECT = 3600

    ## IP address to listen on for metalogger connections (* means any).
    # MATOML_LISTEN_HOST = *

    ## Port to listen on for metalogger connections.
    ## (Default: 9419)
    # MATOML_LISTEN_PORT = 9419

    ## How many seconds of change logs to be preserved in memory.
    ## Note: logs are stored in blocks of 5k lines, so sometimes real number of
    ## seconds may be little bigger; zero disables extra logs storage.
    ## (Default: 600)
    # MATOML_LOG_PRESERVE_SECONDS = 600

    ## IP address to listen on for chunkserver connections (* means any).
    # MATOCS_LISTEN_HOST = *

    ## Port to listen on for chunkserver connections
    ## (Default: 9420)
    # MATOCS_LISTEN_PORT = 9420

    ## IP address to listen on for client (mount) connections (* means any).
    # MATOCL_LISTEN_HOST = *

    ## Port to listen on for client (mount) connections
    ## (Default: 9421).
    # MATOCL_LISTEN_PORT = 9421

    ## IP address to listen on for tapeserver connections (* means any).
    # MATOTS_LISTEN_HOST = *

    ## Port to listen on for tapeserver connections
    ## (Default: 9424)
    # MATOTS_LISTEN_PORT = 9424

    ## Chunks loop shouldn't check more chunks per seconds than given number.
    ## (Default: 100000)
    # CHUNKS_LOOP_MAX_CPS = 100000

    ## Chunks loop will check all chunks in specified time (in seconds) unless
    ## CHUNKS_LOOP_MAX_CPS will force slower execution.
    ## (Default: 300)
    # CHUNKS_LOOP_MIN_TIME = 300

    ## Time in milliseconds between chunks loop execution.
    ## (Default: 1000)
    # CHUNKS_LOOP_PERIOD = 1000

    ## Hard limit on CPU usage by chunks loop (percentage).
    ## (Default: 60)
    # CHUNKS_LOOP_MAX_CPU = 60

    ## Soft maximum number of chunks to delete on one chunkserver.
    ## (Default: 10)
    # CHUNKS_SOFT_DEL_LIMIT = 10

    ## Hard maximum number of chunks to delete on one chunkserver.
    ## (Default: 25)
    # CHUNKS_HARD_DEL_LIMIT = 25

    ## Maximum number of chunks to replicate to one chunkserver.
    ## (Default: 2)
    # CHUNKS_WRITE_REP_LIMIT = 2

    ## Maximum number of chunks to replicate from one chunkserver
    ## (Default: 10)
    # CHUNKS_READ_REP_LIMIT = 10

    ## Percentage of endangered chunks that should be replicated with high priority.
    ## Example: when set to 0.2, up to 20% of chunks served in one turn would be extracted
    ## from endangered priority queue.
    ## When set to 1 (max), no other chunks would be processed as long as there are
    ## any endangered chunks in the queue (not advised)
    ## (Default: 0), i.e. there is no overhead for prioritizing endangered chunks.
    # ENDANGERED_CHUNKS_PRIORITY = 0

    ## Max capacity of endangered chunks queue. This value can limit memory
    ## usage of master server if there are lots of endangered chunks in the
    ## system. This value is ignored if ENDANGERED_CHUNKS_PRIORITY is set to 0.
    ## (Default: 1Mi), i.e. no more than 1Mi chunks will be kept in a queue.
    # ENDANGERED_CHUNKS_MAX_CAPACITY = 1Mi

    ## A maximum difference between disk usage on chunkservers that doesn't trigger
    ## chunk rebalancing. Value is fraction of one (i.e. 0.1 is 10%).
    ## (Default: 0.1)
    # ACCEPTABLE_DIFFERENCE = 0.1

    ## When balancing disk usage, allow moving chunks between servers with
    ## different labels. Value is boolean i.e. '0' means that chunks will be
    ## moved only between servers with the same label.
    ## (Default: 0)
    # CHUNKS_REBALANCING_BETWEEN_LABELS = 0

    ## Interval of freeing inodes being unused for longer than 24 hours in seconds.
    ## (Default: 60)
    # FREE_INODES_PERIOD = 60

    ## Whether to update inode access time on every access,
    ## boolean value (0 or 1)
    ## (Default: 0)
    # NO_ATIME = 0

    ## Time in seconds for which client session data (e.g. list of open files) should be
    ## sustained in the master server after connection with the client was lost.
    ## Values between 60 and 604800 (one week) are accepted.
    ## (Default: 86400)
    # SESSION_SUSTAIN_TIME = 86400

    ## Reject mfsmounts older than 1.6.0 (Boolean, 0 or 1).
    ## Note that mfsexports access control is NOT used for those old clients.
    ## (Default is 0)
    # REJECT_OLD_CLIENTS = 0

    # GLOBALIOLIMITS_FILENAME = /etc/lizardfs/globaliolimits.cfg

    ## How often mountpoints will request bandwidth allocations under constant,
    ## predictable load.
    ## (Default: 0.1)
    # GLOBALIOLIMITS_RENEGOTIATION_PERIOD_SECONDS = 0.1

    ## After inactivity, no waiting is required to transfer the amount of data
    ## equivalent to normal data flow over the period of that many milliseconds.
    ## (Default: 250)
    # GLOBALIOLIMITS_ACCUMULATE_MS = 250

    # MFSMETARESTORE_PATH = /usr/sbin/mfsmetarestore

    ## Delay in seconds before trying to reconnect to metadata server
    ## after disconnection.
    ## Mandatory for "shadow" instance.
    ## (Default: 5)
    # MASTER_RECONNECTION_DELAY = 5

    ## Address of the host running LizardFS metadata server that currently
    ## acts as master.
    ## Mandatory for "shadow" instance.
    MASTER_HOST = lfs-master

    ## Port number where LizardFS metadata server currently running as master
    ## listens for connections from shadow's and metaloggers.
    ## Mandatory for "shadow" instance.
    ## (Default: 9419)
    # MASTER_PORT = 9419

    ## Timeout (in seconds) for metadata server connections;
    ## Mandatory for "shadow" instance.
    ## (Default: 60)
    # MASTER_TIMEOUT = 60

    ## How often metadata checksum shall be sent to backup servers, every N metadata updates.
    ## (Default: 50)
    # METADATA_CHECKSUM_INTERVAL = 50

    ## How fast should metadata be recalculated in background, N objects per function call.
    ## (Default: 100)
    # METADATA_CHECKSUM_RECALCULATION_SPEED = 100

    ## Should checksum verification be disabled while applying changelog, boolean.
    ## (Default: 0)
    # DISABLE_METADATA_CHECKSUM_VERIFICATION = 0

    ## Minimal time in seconds between metadata dumps caused by requests from shadow masters.
    ## (Default: 1800)
    # METADATA_SAVE_REQUEST_MIN_PERIOD = 1800

    # deprecated:
    # CHUNKS_DEL_LIMIT - use CHUNKS_SOFT_DEL_LIMIT instead

    ## Use Berkley DB for file/directory name storage (Boolean, 0 or 1).
    ## By default system memory is used for storing file/directory names.
    ## With this option enabled Berkeley DB is used for storing
    ## names in file (/var/lib/lizardfs/name_storage.db)
    ## (Default: 0)
    # USE_BDB_FOR_NAME_STORAGE = 1

    ## Size of memory cache (in MB) for file/directory names used
    ## by Berkeley DB storage.
    ## (Default: 10)
    # BDB_NAME_STORAGE_CACHE_SIZE = 10

    ## When this option is set to 1, process of selecting chunkservers for chunks
    ## will try to avoid using those that share the same ip.
    ## (Default: 0)
    # AVOID_SAME_IP_CHUNKSERVERS = 0

    ## When set, percentage of load will be added to chunkserver disk usage to determine most fitting
    ## chunkserver. Heavy loaded chunkservers will be picked for operations less frequently.
    ## (Default: 0, Valid range: [0, 0.5])
    # LOAD_FACTOR_PENALTY = 0

    ## Minimum number of required redundant chunk parts that can be lost before
    ## chunk becomes endangered
    ## (Default: 0)
    # REDUNDANCY_LEVEL = 0

    ## This option can be used to specify initial number of snapshotted nodes that will be atomically
    ## cloned before enqueuing the task for execution in fixed-sized batches.
    ## (Default: 1000)
    # SNAPSHOT_INITIAL_BATCH_SIZE = 1000

    ## This option specifies the maximum initial batch size set for snapshot request.
    ## (Default: 10000)
    # SNAPSHOT_INITIAL_BATCH_SIZE_LIMIT = 10000

    ## Test files loop will try to check all files in specified time (in seconds).
    ## (Default: 3600)
    # FILE_TEST_LOOP_MIN_TIME = 3600
  mfstopology.cfg: |
    # mfstopology.cfg(5)

    # Server groups can be specified per line with full ip addresses or with
    # netmasks in the following manner:
    #
    # ip_numbers    rack_id
    #
    # Bear in mind that each line adds new information about the topology.

    # Here is an example:
    # ip addresses can be defined as a network class with number of significant bits
    # 192.168.1.0/24                1
    #
    # ip addresses can be defined as a range of ip addresses
    # 192.168.2.0-192.168.2.255     2
    #
    # ip address blocks can be defined as a network class with network mask
    # 192.168.3.0/255.255.255.0     3
    #
    # or as a single ip address
    # 192.168.1.1                   4
    # 192.168.2.1                   4
    # 192.168.3.1                   4

    # After the above definitions MooseFS knows that:
    # rack/group 1 has machines with ip numbers 192.168.1.0 and 192.168.1.2-192.168.1.255
    # rack/group 2 has machines with ip numbers 192.168.2.0 and 192.168.2.2-192.168.2.255
    # rack/group 3 has machines with ip numbers 192.168.3.0 and 192.168.3.2-192.168.3.255
    # rack/group 4 has machines with ip numbers 192.168.1.1,192.168.2.1 and 192.168.3.1

    # For chunkservers and mounts connecting to the mfs-master that have not been
    # defined in a group, group 0 will be used.
kind: ConfigMap
metadata:
  name: lizardfs-master-config
  namespace: lizardfs
